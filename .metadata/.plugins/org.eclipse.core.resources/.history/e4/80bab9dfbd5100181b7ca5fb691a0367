package controllers

import javax.inject._
import java.util.concurrent.atomic.AtomicInteger
import play.api.mvc._
import play.api.libs.json.Writes
import play.api.libs.json.Json
import play.api.libs.json.Reads
import play.api.libs.json.JsPath
import play.api.libs.json.Reads._
import play.api.libs.functional.syntax._
import java.util.concurrent.atomic.AtomicReference

import akka.actor.ActorSystem
import akka.stream.Materializer
import javax.inject.Inject
import play.api.libs.streams.ActorFlow
import play.api.mvc.AbstractController
import play.api.mvc.ControllerComponents
import play.api.mvc.WebSocket
import actors.WSChatActor
import actors.WSChatManager

import play.api.db.slick.DatabaseConfigProvider
import play.api.db.slick.HasDatabaseConfigProvider

import slick.jdbc.JdbcProfile
import slick.jdbc.JdbcCapabilities
import slick.jdbc.MySQLProfile.api._
import models.MeowderQueries
import scala.concurrent.ExecutionContext
import play.api.data.Form
import play.api.data.Forms.mapping
import play.api.data.Forms._
import scala.concurrent.Future
import Console._

case class NewChat(id: Int, sender: String, receiver: String, startDate: String, message: String)
//case class NewMessage(id: Int, chatid: Int, message: String, dateTime: String)

@Singleton
class MeowderChatController @Inject() (
    protected val dbConfigProvider: DatabaseConfigProvider,
    mcc: MessagesControllerComponents) (implicit system: ActorSystem, mat: Materializer, ec: ExecutionContext) extends MessagesAbstractController(mcc) 
    with HasDatabaseConfigProvider[JdbcProfile] {
  
  
  val wsManager = system.actorOf(WSChatManager.props)

  val newChatForm = Form(mapping(
      "id" -> number,
      "sender" -> nonEmptyText,
      "receiver" -> nonEmptyText,
      "startDate" -> nonEmptyText,
      "message" -> nonEmptyText)(NewChat.apply)(NewChat.unapply))
 /* 
  val messageForm = Form(mapping(
      "id" -> number,
      "chatid" -> number,
      "message" -> nonEmptyText,
      "dateTime" -> nonEmptyText)(NewMessage.apply)(NewMessage.unapply))
  */
  def socket = WebSocket.accept[String, String] { request =>
    ActorFlow.actorRef { out =>
      WSChatActor.props(out, wsManager)
    }
  }
  
  /*
  def createChatPage(sender: String, receiver: String) = Action.async { implicit request =>
    request.session.get("connection").map { user =>
      MeowderQueries.addChat(, db).map(chat => Ok(views.html.datingChat(user, chat, newChatForm)))
    }.get
  }
  
  
  
  def addMessage = Action.async { implicit request =>
    messageForm.bindFromRequest().fold(
        formWithErrors => {
          val Future = MeowderQueries.allMessages(db)
          Future.map(chats => BadRequest(views.html.datingChat(sender,messages, formWithErrors)))
        },
        newMsg => {
          val addFuture = MeowderQueries.addMessage(newMsg, db)
          addFuture.map { cnt =>
            if(cnt == 1) Redirect(routes.MeowderChatController.createChatPage).withSession("connection" -> sender)
            else Redirect(routes.MeowderChatController.createChatPage).flashing("error" -> "Error creating task")
          }
        })
  }
  */
  
  def addChat(sender: String, receiver: String) = Action.async { implicit request =>
     newChatForm.bindFromRequest().fold(
        formWithErrors => {        
          Console.println("error")
          val Future = MeowderQueries.allChats(db)
          Future.map(messages => BadRequest(views.html.datingChat(sender, receiver, messages, formWithErrors)))
        },
        newMsg => {
          Console.println("creating chat page")
          val addFuture = MeowderQueries.addMessage(Option(sender), Option(receiver), Option(newMsg.message), db)
          addFuture.map { add =>
            if(add == 1) {
              val msgFuture = MeowderQueries.allMessages(sender, receiver, db)
              msgFuture.map { cnt =>
                if(cnt.nonEmpty == true) Ok(views.html.datingChat(sender, receiver, cnt, newChatForm))
                else Ok(views.html.datingChat(sender, receiver, cnt, newChatForm)).flashing("error" -> "Error creating msg")
              }
              
            }
            else Redirect(routes.MeowderChatController.createChatPage(sender, receiver))
            
          }
        })
  }
  
  def createChatPage(sender: String, receiver: String) = Action.async { implicit request =>
    val msgFuture = MeowderQueries.allMessages(sender, receiver, db)
    msgFuture.map { cnt =>
      if(cnt.nonEmpty == true) Ok(views.html.datingChat(sender, receiver, cnt, newChatForm))
      else Ok(views.html.datingChat(sender, receiver, cnt, newChatForm)).flashing("error" -> "Error creating msg")
    }
  }
}